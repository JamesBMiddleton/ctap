#ifndef INPUT_H
#define INPUT_H

#include "utils.h"

////////////////////////////////////////////////////////////////////////////////
//////////////////////////////// API DECL //////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

typedef struct {
    u32 placeholder;
} inp_init_arg_t;
typedef enum { inp_init_OK, inp_init_MAP_INVALID } inp_init_e;
static inp_init_e inp_init(inp_init_arg_t arg);

////////////////////////////////////////////////////////////////////////////////
///////////////////////////// INTERNAL IMPL ////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
////////////////////////////// API IMPL ////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-function"

struct state_inp_t {
    u32 placeholder;
    // pool_t
} static state_inp = {0}; // NOLINT

/*
 * Initialise the input module. 
 *
 * @param args - initialisation arguments.
*/
static inp_init_e inp_init(inp_init_arg_t args)
{
    return (args.placeholder) ? inp_init_OK : inp_init_MAP_INVALID;
}

#pragma GCC diagnostic pop
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#endif // INPUT_H
