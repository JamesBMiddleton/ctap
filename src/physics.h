#ifndef PHYSICS_H
#define PHYSICS_H

#include "utils.h"

////////////////////////////////////////////////////////////////////////////////
//////////////////////////////// API DECL //////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

typedef struct {
    u32 placeholder;
} phy_init_arg_t;
typedef enum { phy_init_OK, phy_init_MAP_INVALID } phy_init_e;
static phy_init_e phy_init(phy_init_arg_t arg);

////////////////////////////////////////////////////////////////////////////////
///////////////////////////// INTERNAL IMPL ////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////////////////////////////////////////////
////////////////////////////// API IMPL ////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-function"

struct state_phy_t {
    u32 placeholder;
    // pool_t
} static state_phy = {0}; // NOLINT

/*
 * Initialise the physics module. 
 *
 * @param args - initialisation arguments.
*/
static phy_init_e phy_init(phy_init_arg_t args)
{
    return (args.placeholder) ? phy_init_OK : phy_init_MAP_INVALID;
}

#pragma GCC diagnostic pop
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

#endif // PHYSICS_H
